To create a three-tier project, weâ€™ll use the following structure:

Frontend (UI Layer): This will be a simple web interface using HTML, CSS, and JavaScript.
Backend (Application Layer): A Java Spring Boot application to handle the business logic.
Database Layer: MySQL as the database.
Below is a guide to create the project, with steps for setting up, building, and deploying using Jenkins in AWS.

1. Frontend (UI Layer)
Create a folder frontend with basic HTML, CSS, and JavaScript files.

index.html
html
Copy code
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Three-Tier Project</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="container">
        <h1>Welcome to the Three-Tier Project</h1>
        <form action="http://localhost:8080/login" method="post">
            <label for="username">Username:</label>
            <input type="text" id="username" name="username" required>
            <label for="password">Password:</label>
            <input type="password" id="password" name="password" required>
            <button type="submit">Login</button>
        </form>
    </div>
</body>
</html>
style.css
css
Copy code
body {
    font-family: Arial, sans-serif;
    background-color: #f0f0f0;
}
.container {
    margin: 100px auto;
    width: 300px;
    padding: 20px;
    background-color: white;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}
2. Backend (Java Spring Boot Application)
Maven Project Setup
Create a folder named backend.
Use Maven to generate a Spring Boot project.
bash
Copy code
mvn archetype:generate -DgroupId=com.example -DartifactId=backend -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false
cd backend
Update pom.xml to include Spring Boot dependencies:

xml
Copy code
<parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>2.7.1</version>
</parent>

<dependencies>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <dependency>
        <groupId>mysql</groupId>
        <artifactId>mysql-connector-java</artifactId>
        <scope>runtime</scope>
    </dependency>
</dependencies>
Java Code
Application.java
java
Copy code
package com.example.backend;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class Application {
    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }
}
LoginController.java
java
Copy code
package com.example.backend.controller;

import org.springframework.web.bind.annotation.*;
import org.springframework.http.ResponseEntity;

@RestController
public class LoginController {

    @PostMapping("/login")
    public ResponseEntity<String> login(@RequestParam String username, @RequestParam String password) {
        if ("admin".equals(username) && "password".equals(password)) {
            return ResponseEntity.ok("Welcome " + username);
        }
        return ResponseEntity.status(401).body("Invalid credentials");
    }
}
3. Database Layer (MySQL)
Launch an RDS instance (MySQL) in AWS.
Create a database named three_tier_db.
Configure MySQL with security groups allowing access from your application.
Modify application.properties in the Spring Boot application to connect to MySQL:

properties
Copy code
spring.datasource.url=jdbc:mysql://your-rds-endpoint:3306/three_tier_db
spring.datasource.username=your_db_username
spring.datasource.password=your_db_password
spring.jpa.hibernate.ddl-auto=update
4. Build and Deploy Using Jenkins in AWS
Step-by-Step Setup
Jenkins Setup:

Launch a Jenkins server (EC2 instance) on AWS.
Install Jenkins plugins for Maven and Git.
Create Jenkinsfile: In the root directory of your project (backend), create a Jenkinsfile to automate the build and deployment process.

groovy
Copy code
pipeline {
    agent any

    stages {
        stage('Build') {
            steps {
                sh 'mvn clean install'
            }
        }
        stage('Test') {
            steps {
                sh 'mvn test'
            }
        }
        stage('Deploy') {
            steps {
                // Example of copying artifact to EC2 instance for deployment
                sh '''
                scp -i /path/to/key.pem target/backend-0.0.1-SNAPSHOT.jar ec2-user@your-ec2-ip:/path/to/deploy/
                ssh -i /path/to/key.pem ec2-user@your-ec2-ip 'sudo systemctl restart your-app-service'
                '''
            }
        }
    }
}
Jenkins Configuration:
Create a new Jenkins job.
Configure the repository URL (e.g., GitHub).
Add your Jenkinsfile in the configuration.
Ensure the Jenkins server has SSH access to the EC2 instance (for deployment).
Deploy:
Ensure the EC2 instance where the backend is deployed has access to the RDS instance (MySQL) and is secured with appropriate security groups.
Ensure the front-end is hosted on an S3 bucket (optional) or another web server, and it's publicly accessible.
